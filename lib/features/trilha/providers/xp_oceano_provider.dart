import 'package:flutter_riverpod/flutter_riverpod.dart';

// ===== MODELO DE ESTADO DO XP OCE√ÇNICO =====
class XpOceanoState {
  final int xpTotal;
  final int nivel;
  final int questoesRespondidas;
  final int questoesCorretas;

  XpOceanoState({
    this.xpTotal = 0,
    this.nivel = 1,
    this.questoesRespondidas = 0,
    this.questoesCorretas = 0,
  });

  // ===== PROPRIEDADES CALCULADAS =====

  /// XP necess√°rio para o pr√≥ximo n√≠vel (progress√£o oce√¢nica)
  int get xpProximoNivel {
    return nivel * 100; // Cada n√≠vel requer 100 XP a mais
  }

  /// XP atual dentro do n√≠vel atual
  int get xpAtual {
    int xpNivelAnterior =
        ((nivel - 1) * nivel * 100) ~/ 2; // Soma dos XP dos n√≠veis anteriores
    return xpTotal - xpNivelAnterior;
  }

  /// Progresso para o pr√≥ximo n√≠vel (0.0 a 1.0)
  double get progressoNivel {
    if (xpProximoNivel == 0) return 0.0;
    return (xpAtual / xpProximoNivel).clamp(0.0, 1.0);
  }

  /// Percentual de acerto (precis√£o do mergulhador)
  double get porcentagemAcerto {
    if (questoesRespondidas == 0) return 0.0;
    return questoesCorretas / questoesRespondidas;
  }

  /// T√≠tulo do mergulhador baseado no n√≠vel
  String get tituloMergulhador {
    if (nivel >= 10) return 'Mergulhador Lend√°rio';
    if (nivel >= 7) return 'Explorador dos Abissos';
    if (nivel >= 5) return 'Mergulhador Experiente';
    if (nivel >= 3) return 'Mergulhador Intermedi√°rio';
    return 'Mergulhador Iniciante';
  }

  // ===== M√âTODOS DE C√ìPIA =====

  XpOceanoState copyWith({
    int? xpTotal,
    int? nivel,
    int? questoesRespondidas,
    int? questoesCorretas,
  }) {
    return XpOceanoState(
      xpTotal: xpTotal ?? this.xpTotal,
      nivel: nivel ?? this.nivel,
      questoesRespondidas: questoesRespondidas ?? this.questoesRespondidas,
      questoesCorretas: questoesCorretas ?? this.questoesCorretas,
    );
  }
}

// ===== NOTIFIER DO XP OCE√ÇNICO =====
class XpOceanoNotifier extends StateNotifier<XpOceanoState> {
  XpOceanoNotifier() : super(XpOceanoState());

  /// Incrementa XP quando o mergulhador acerta uma quest√£o
  void acerto() {
    const int xpPorAcerto = 10; // XP ganho por acerto
    int novoXpTotal = state.xpTotal + xpPorAcerto;
    int novoNivel = _calcularNivel(novoXpTotal);

    state = state.copyWith(
      xpTotal: novoXpTotal,
      nivel: novoNivel,
      questoesRespondidas: state.questoesRespondidas + 1,
      questoesCorretas: state.questoesCorretas + 1,
    );

    // Verifica se subiu de n√≠vel
    if (novoNivel > state.nivel) {
      _celebrarSubidaNivel(novoNivel);
    }
  }

  /// Registra erro (n√£o ganha XP, mas conta para precis√£o)
  void erro() {
    state = state.copyWith(
      questoesRespondidas: state.questoesRespondidas + 1,
      // questoesCorretas n√£o muda
    );
  }

  /// Reseta o progresso (para jogar novamente)
  void reset() {
    state = XpOceanoState();
  }

  /// Calcula o n√≠vel baseado no XP total
  int _calcularNivel(int xpTotal) {
    if (xpTotal < 100) return 1;
    if (xpTotal < 300) return 2; // 100 + 200
    if (xpTotal < 600) return 3; // 100 + 200 + 300
    if (xpTotal < 1000) return 4; // 100 + 200 + 300 + 400
    if (xpTotal < 1500) return 5; // ... + 500
    if (xpTotal < 2100) return 6; // ... + 600
    if (xpTotal < 2800) return 7; // ... + 700
    if (xpTotal < 3600) return 8; // ... + 800
    if (xpTotal < 4500) return 9; // ... + 900
    return 10; // N√≠vel m√°ximo
  }

  /// Celebra a subida de n√≠vel (pode ser expandido com anima√ß√µes)
  void _celebrarSubidaNivel(int novoNivel) {
    // TODO: Implementar celebra√ß√£o visual
    // Por exemplo: mostrar modal de parab√©ns, tocar som, etc.
    print('üéâ Mergulhador subiu para n√≠vel $novoNivel!');
  }

  /// Adiciona XP b√¥nus (para conquistas especiais)
  void adicionarXpBonus(int xpBonus) {
    int novoXpTotal = state.xpTotal + xpBonus;
    int novoNivel = _calcularNivel(novoXpTotal);

    state = state.copyWith(
      xpTotal: novoXpTotal,
      nivel: novoNivel,
    );
  }

  /// Obt√©m estat√≠sticas detalhadas
  Map<String, dynamic> get estatisticas {
    return {
      'xpTotal': state.xpTotal,
      'nivel': state.nivel,
      'tituloMergulhador': state.tituloMergulhador,
      'questoesRespondidas': state.questoesRespondidas,
      'questoesCorretas': state.questoesCorretas,
      'porcentagemAcerto': (state.porcentagemAcerto * 100).toInt(),
      'xpProximoNivel': state.xpProximoNivel,
      'progressoNivel': (state.progressoNivel * 100).toInt(),
    };
  }
}

// ===== PROVIDER PRINCIPAL =====
final xpOceanoProvider = StateNotifierProvider<XpOceanoNotifier, XpOceanoState>(
  (ref) => XpOceanoNotifier(),
);

// ===== PROVIDERS AUXILIARES PARA FACILITAR O USO =====

/// Provider que retorna apenas o n√≠vel atual
final nivelOceanoProvider = Provider<int>((ref) {
  return ref.watch(xpOceanoProvider).nivel;
});

/// Provider que retorna apenas o XP total
final xpTotalOceanoProvider = Provider<int>((ref) {
  return ref.watch(xpOceanoProvider).xpTotal;
});

/// Provider que retorna a porcentagem de acerto
final precisaoOceanoProvider = Provider<double>((ref) {
  return ref.watch(xpOceanoProvider).porcentagemAcerto;
});

/// Provider que retorna o t√≠tulo do mergulhador
final tituloMergulhadorProvider = Provider<String>((ref) {
  return ref.watch(xpOceanoProvider).tituloMergulhador;
});

/// Provider que retorna se o jogador pode subir de n√≠vel
final podeSubirNivelProvider = Provider<bool>((ref) {
  final state = ref.watch(xpOceanoProvider);
  return state.progressoNivel >= 1.0;
});

// ===== EXTENS√ïES √öTEIS =====

extension XpOceanoStateExtensions on XpOceanoState {
  /// Verifica se √© um mergulhador experiente (n√≠vel 5+)
  bool get isExperiente => nivel >= 5;

  /// Verifica se tem alta precis√£o (80%+)
  bool get isAltaPrecisao => porcentagemAcerto >= 0.8;

  /// Verifica se √© um mergulhador lend√°rio
  bool get isLendario => nivel >= 10;

  /// Retorna a cor do n√≠vel baseada na progress√£o
  /// √ötil para UI din√¢mica
  String get corNivel {
    if (nivel >= 10) return '#FFD700'; // Dourado
    if (nivel >= 7) return '#00CED1'; // Turquesa
    if (nivel >= 5) return '#4169E1'; // Azul Royal
    if (nivel >= 3) return '#1E90FF'; // Azul Dodger
    return '#87CEEB'; // Azul C√©u
  }
}
